---
import { getEntry, render, type CollectionEntry } from 'astro:content'
import { Image } from 'astro:assets'
import StatusIndicator from '../StatusIndicator.astro'

type Props = {
	post: CollectionEntry<'posts'>
}

const {
	post
} = Astro.props

const { remarkPluginFrontmatter } = await render(post)

// Format date using native toLocaleString
const formatDate = (date: Date) => {
	return date.toLocaleString('en-US', {
		year: 'numeric',
		month: 'long',
		day: 'numeric'
	})
}
---

<!-- Hero Section -->
<div class=" mb-6 flex flex-col gap-y-1.5">
	<!-- Post Status -->
	<div class="flex flex-row items-center  gap-2  text-sm transition-all  text-gray-600 dark:text-gray-400">
		<StatusIndicator status={post.data.status} />
		{post.data.status === 'todo' && (
			<span class='relative flex items-center justify-center'>
				<span class='relative inline-flex h-2 w-2 rounded-full bg-white border border-gray-400 dark:bg-gray-200 dark:border-gray-600'></span>
			</span>
			<p>To Do</p>
		)}
		{post.data.status === 'done' && (
			<span class='relative flex items-center justify-center'>
				<span class='relative inline-flex h-2 w-2 rounded-full bg-green-400'></span>
			</span>
			<p>Done</p>
		)}
		<span>
			&bull;
		</span>
		<span>
			Updated
		</span>
		<time datetime={post.data.date.toISOString()}>
			{formatDate(post.data.date)}
		</time>
	</div>

	<!-- Post Title -->
	 <div class="flex items-center gap-4">
		<h1 id="post-hero" class=" text-3xl font-medium sm:mb-1">
			{post.data.title}
		</h1>

	 </div>


	<!-- Post Description -->
	<!-- {post.data.description && (
		<p class="text-lg text-gray-600 dark:text-gray-400 leading-relaxed mb-6">
			{post.data.description}
		</p>
	)} -->

	<!-- Tags -->
	{post.data.tags && post.data.tags.length > 0 && (
		<div class="flex flex-wrap items-center gap-2 ">
<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.75" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-tags-icon lucide-tags"><path d="M13.172 2a2 2 0 0 1 1.414.586l6.71 6.71a2.4 2.4 0 0 1 0 3.408l-4.592 4.592a2.4 2.4 0 0 1-3.408 0l-6.71-6.71A2 2 0 0 1 6 9.172V3a1 1 0 0 1 1-1z"/><path d="M2 7v6.172a2 2 0 0 0 .586 1.414l6.71 6.71a2.4 2.4 0 0 0 3.191.193"/><circle cx="10.5" cy="6.5" r=".5" fill="currentColor"/></svg>			{post.data.tags.map((tag, index) => (
				<a
					href={`/tags/${tag}/`}
					class="inline-block before:content-['#'] hover:underline hover:underline-offset-4"
				>
					{tag}
				</a>
			))}
		</div>
	)}


</div>